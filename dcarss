from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CATEGORY, SERVICE, EXTRA, WORKER, DATE, TIME, CAR_NUMBER, CLIENT_NAME, CLIENT_PHONE = range(9)

categories = {
    "–°–µ–¥–∞–Ω üöó": 1,
    "–ö—É–ø–µ üèéÔ∏è": 2,
    "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä üöô": 3,
    "SUV üöê": 4,
    "–ú–∏–Ω–∏–≤—ç–Ω üöê": 5
}

services = {
    "–ü—Ä–æ–±–∏–≤–∫–∞": [40000, 40000, 45000, 50000, 55000],
    "–ß–∏—Å—Ç–∫–∞ —Å–∞–ª–æ–Ω–∞": [50000, 60000, 65000, 70000, 80000],
    "–ú–æ–π–∫–∞ –∫—É–∑–æ–≤–∞": [60000, 70000, 75000, 80000, 85000],
    "–ü–æ–ª–Ω–∞—è –º–æ–π–∫–∞": [80000, 90000, 95000, 100000, 120000],
    "–ú–æ–π–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è": [80000, 80000, 80000, 80000, 80000]
}

extra_services = {
    "–°—É—Ö–æ–π —Ç—É–º–∞–Ω (+20000)": 20000,
    "–í–æ—Å–∫ (+25000)": 25000,
    "–ë–µ–∑ –¥–æ–ø. —É—Å–ª—É–≥": 0
}

workers = ["–†–æ–∑–∏–º—É—Ä–æ–¥", "–ò—Å–ª–æ–º", "–ú—É—Ö–∞–º–º–∞–¥", "–§–∞—Ä—Ö–æ–¥", "–°–∞—Ä–¥–æ—Ä", "–ë–µ–≥–∑–æ–¥", "–û–∑–æ–¥"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("price_table.png", "rb") as photo:
            await update.message.reply_photo(
                photo=InputFile(photo),
                caption="üßæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DCAR-S!"
            )
        buttons = [[InlineKeyboardButton(text, callback_data=text)] for text in categories]
        await update.message.reply_text("üöò –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=InlineKeyboardMarkup(buttons))
        return CATEGORY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["category"] = query.data
    buttons = [[InlineKeyboardButton(name, callback_data=name)] for name in services]
    await query.edit_message_text("üßº –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=InlineKeyboardMarkup(buttons))
    return SERVICE

async def service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["service"] = query.data
    buttons = [[InlineKeyboardButton(name, callback_data=name)] for name in extra_services]
    await query.edit_message_text("‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:", reply_markup=InlineKeyboardMarkup(buttons))
    return EXTRA

async def extra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["extra"] = query.data
    buttons = [[InlineKeyboardButton(name, callback_data=name)] for name in workers]
    await query.edit_message_text("üë®‚Äçüîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–π—â–∏–∫–∞:", reply_markup=InlineKeyboardMarkup(buttons))
    return WORKER

async def worker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["worker"] = query.data
    await query.edit_message_text("üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.06.2025):")
    return DATE

async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        datetime.strptime(update.message.text, "%d.%m.%Y")
        context.user_data["date"] = update.message.text
        await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):")
        return TIME
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return DATE

async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        datetime.strptime(update.message.text, "%H:%M")
        context.user_data["time"] = update.message.text
        await update.message.reply_text("üöò –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        return CAR_NUMBER
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return TIME

async def car_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["car_number"] = update.message.text
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return CLIENT_NAME

async def client_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["client_name"] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return CLIENT_PHONE

async def client_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["client_phone"] = update.message.text
    data = context.user_data
    if all(key in data for key in ["category", "service", "extra", "worker", "date", "time", "car_number", "client_name"]):
        cat_index = categories[data["category"]] - 1
        base_price = services[data["service"]][cat_index]
        extra_price = extra_services[data["extra"]]
        total = base_price + extra_price

        summary = (
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
            f"–£—Å–ª—É–≥–∞: {data['service']}\n"
            f"–î–æ–ø.—É—Å–ª—É–≥–∞: {data['extra']}\n"
            f"–ú–æ–π—â–∏–∫: {data['worker']}\n"
            f"–î–∞—Ç–∞: {data['date']}\n"
            f"–í—Ä–µ–º—è: {data['time']}\n"
            f"–ê–≤—Ç–æ: {data['car_number']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {data['client_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['client_phone']}\n"
            f"üí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total} —Å—É–º\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä DCAR-S!"
        )

        await update.message.reply_text(summary)
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
    return ConversationHandler.END

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start.")

def main():
    app = ApplicationBuilder().token("YOUR_BOT_TOKEN").build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CATEGORY: [CallbackQueryHandler(category)],
            SERVICE: [CallbackQueryHandler(service)],
            EXTRA: [CallbackQueryHandler(extra)],
            WORKER: [CallbackQueryHandler(worker)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time)],
            CAR_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, car_number)],
            CLIENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, client_name)],
            CLIENT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, client_phone)],
        },
        fallbacks=[CommandHandler("start", start), MessageHandler(filters.ALL, fallback)]
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()