import logging, os
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler, ContextTypes
)

CATEGORY, SERVICE, DATE, TIME, CONFIRM = range(5)

CATEGORIES = {
    "–ö–∞—Ç.1 üöó": "–õ–µ–≥–∫–æ–≤–æ–π",
    "–ö–∞—Ç.2 üèéÔ∏è": "–ö—É–ø–µ",
    "–ö–∞—Ç.3 üöô": "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä/–î–∂–∏–ø",
    "–ö–∞—Ç.4 üöê": "–§—É—Ä–≥–æ–Ω",
    "–ö–∞—Ç.5 üöê": "–ú–∏–Ω–∏–≤—ç–Ω"
}

SERVICES = {
    "–ü—Ä–æ–±–∏–≤–∫–∞": "probivka",
    "–ú–æ–π–∫–∞ –∫—É–∑–æ–≤–∞": "body",
    "–ü–æ–ª–Ω–∞—è –º–æ–π–∫–∞": "full",
    "–ü—Ä–µ–º–∏—É–º": "premium"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–π–∫–∏ DCAR‚ÄëS. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ:",
        reply_markup=ReplyKeyboardMarkup([[k] for k in CATEGORIES.keys()], one_time_keyboard=True, resize_keyboard=True),
    )
    return CATEGORY

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:",
        reply_markup=ReplyKeyboardMarkup([[k] for k in SERVICES.keys()], one_time_keyboard=True, resize_keyboard=True),
    )
    return SERVICE

async def choose_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["service"] = update.message.text
    today_btns = [
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today"),
        InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="tomorrow"),
    ]
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        reply_markup=InlineKeyboardMarkup.from_row(today_btns),
    )
    return DATE

async def pick_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data
    context.user_data["date"] = choice
    times = ["09:00", "10:00", "11:00", "13:00", "14:00", "15:00", "17:00"]
    buttons = [[InlineKeyboardButton(t, callback_data=t)] for t in times]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=InlineKeyboardMarkup(buttons))
    return TIME

async def pick_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["time"] = query.data
    data = context.user_data
    summary = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n–£—Å–ª—É–≥–∞: {data['service']}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?"
    btns = [
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="yes"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="no"),
    ]
    await query.edit_message_text(summary, reply_markup=InlineKeyboardMarkup.from_row(btns))
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "yes":
        await query.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –ñ–¥—ë–º –≤–∞—Å üöó")
    else:
        await query.edit_message_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("–£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    logging.basicConfig(level=logging.INFO)
    application = Application.builder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_category)],
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_service)],
            DATE: [CallbackQueryHandler(pick_date)],
            TIME: [CallbackQueryHandler(pick_time)],
            CONFIRM: [CallbackQueryHandler(confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv)
    application.run_polling()

if __name__ == "__main__":
    main()
